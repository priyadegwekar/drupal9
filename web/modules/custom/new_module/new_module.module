<?php

/**
 * @file
 * Provides a new module entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\new_module\Entity\New;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_theme().
 */
// function new_module_theme() {
//   return[
//     'my_template' =>[
//       'variables' =>[
//         'viewsonsite' => NULL,  
//       ],
//     ]
//   ];
// }

/**
 * Prepares variables for new module templates.
 *
 * Default template: new.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the new module information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_new(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function new_module_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish new modules.
      $storage = \Drupal::entityTypeManager()->getStorage('new');
      $new_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->execute();
      foreach ($storage->loadMultiple($new_ids) as $new) {
        $new->set('status', FALSE);
        $new->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize new modules.
      $storage = \Drupal::entityTypeManager()->getStorage('new');
      $new_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->execute();
      foreach ($storage->loadMultiple($new_ids) as $new) {
        $new->setOwnerId(0);
        $new->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function new_module_user_predelete(UserInterface $account) {
  // Delete new modules.
  $storage = \Drupal::entityTypeManager()->getStorage('new');
  $new_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $news = $storage->loadMultiple($new_ids);
  $storage->delete($news);
}
function new_module_views_pre_render(ViewExecutable &$view) {

  // $view_data = Views::getView('testing_view');
  // $results = $view_data->results;
  // $view->setDisplay('page_1');
//   $views_on_site = Views::getViewsAsOptions();
// dd($views_on_site);
  $view->execute();
  $results = $view->result;
  // dd($results);

  // if($results){
  //   echo 'data';
  // }
}
function new_module_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //Get form id
  if ($form_id == 'node_new_type_form') {
    // print $form check for field and according to that alter it
    // dd($form);
    // dd ($form['field_add_date']);
    $form['field_add_date']['widget'][0]['#title'] = t('Show end date (optional)');

  }
  }
